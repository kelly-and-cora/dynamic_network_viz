weights = (1-e)^(k-1)
#weights:
k <- seq(from=0, to = 10, by = 1)
e = 0.5
weights = (1-e)^(k-1)
weights
#weights:
k <- seq(from=1, to = 10, by = 1)
e = 0.5
weights = (1-e)^(k-1)
weights
#weights:
k <- seq(from=1, to = 10, by = 1)
e = 0.5
gradual_ex_weights = (1-e)^(k-1)
gradual_ex_weights
e = 0.05
gradual_ex_weights = (1-e)^(k-1)
gradual_ex_weights
e = 0.9
gradual_ex_weights = (1-e)^(k-1)
gradual_ex_weights
e = 0.8
gradual_ex_weights = (1-e)^(k-1)
gradual_ex_weights
#weights:
k <- seq(from=1, to = 10, by = 1)
e = 0.7
gradual_ex_weights = (1-e)^(k-1)
gradual_ex_weights
e = 0.5
gradual_ex_weights = (1-e)^(k-1)
gradual_ex_weights
e = 0.05
gradual_ex_weights = (1-e)^(k-1)
gradual_ex_weights
e = 0.01
gradual_ex_weights = (1-e)^(k-1)
gradual_ex_weights
##Bottom ranks
e = 0.01
gradual_bottom_ex_weights = (1-e)^(10-k)
gradual_bottom_ex_weights
gradWeightGraph <- ggplot(idat,aes(x=item, y=gradWeights)) + geom_point() +
xlab("Rank Position") + ylab("Gradual Weight") +
xlim(1, 102) +
annotate("text", label = "epsilon = 0.05", x = 75, y = .6, size = 8, colour = "black")
gradWeightGraph
#grad weights graph
idat<-idat[order(idat$item),]
idat$gradWeights <- gradWeights
idat$item <- as.numeric(idat$item)
gradWeightGraph <- ggplot(idat,aes(x=item, y=gradWeights)) + geom_point() +
xlab("Rank Position") + ylab("Gradual Weight") +
xlim(1, 102) +
annotate("text", label = "epsilon = 0.05", x = 75, y = .6, size = 8, colour = "black")
gradWeightGraph
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/gradWeightGraph.png", plot = gradWeightGraph)
gradWeightGraph <- ggplot(idat,aes(x=item, y=gradWeights)) + geom_point() +
xlab("Rank Position") + ylab("Gradual Weight") +
xlim(5, 102) +
annotate("text", label = "epsilon = 0.05", x = 75, y = .6, size = 8, colour = "black")
gradWeightGraph
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/gradWeightGraph.png", plot = gradWeightGraph)
library(rstan)
library(ggplot)
#grad weights graph
idat<-idat[order(idat$item),]
idat$gradWeights <- gradWeights
idat$item <- as.numeric(idat$item)
gradWeightGraph <- ggplot(idat,aes(x=item, y=gradWeights)) + geom_point() +
xlab("Rank Position") + ylab("Gradual Weight") +
xlim(5, 102) +
annotate("text", label = "epsilon = 0.05", x = 75, y = .6, size = 8, colour = "black")
gradWeightGraph
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/gradWeightGraph.png", plot = gradWeightGraph)
#grad weights graph
idat<-idat[order(idat$item),]
idat$gradWeights <- gradWeights
idat$item <- as.numeric(idat$item)
gradWeightGraph <- ggplot(idat,aes(x=item, y=gradWeights)) + geom_point() +
xlab("Rank Position") + ylab("Gradual Weight") +
xlim(1, 102) +
annotate("text", label = "epsilon = 0.05", x = 75, y = .6, size = 8, colour = "black")
gradWeightGraph
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/gradWeightGraph.png", plot = gradWeightGraph)
##from IllinoisRankings.r
library(rstan)
library(ggplot)
##from IllinoisRankings.r
library(rstan)
library(ggplot)
library(ggplot2)
#import data
idat <- read.csv("/Users/cora/git_repos/RankingMethods/data/Illinois_LBW_item_n_y.csv")
##from IllinoisRankings.r
library(rstan)
library(ggplot2)
#import data
idat <- read.csv("/Users/cora/git_repos/RankingMethods/data/Illinois_LBW_item_n_y.csv")
idat$item <- as.factor(as.numeric(idat$County))
N <- nrow(idat)
#get posterior samples using glmer model
post <- PostSamples(idat)
#convert post to probabilities
p_post <- exp(-2.492716 + post)/(1 + exp(-2.492716 + post))
#1 raw rank
idat<-idat[order(idat$item),] #we needed to reorder bc of alphabetizing differences
idat$rawRank <- as.integer(rank(idat$p)) #checked
idat$rawRank <- as.integer(rank(idat$p)) #checked
#2. posterior mean point estimate ranking
raw_estimates_post_means <- apply(p_post, 2, mean)
idat<-idat[order(idat$item),] #we needed to reorder bc of alphabetizing differences
idat<-idat[order(idat$item),]  #REORDERS we needed to reorder bc of alphabetizing differences
idat$postMeans <- raw_estimates_post_means
idat$pointRank <- as.integer(rank(idat$postMeans)) #checked!
View(idat)
#set working directory
setwd("/Users/cora/git_repos/dynamic_network_viz")
time1 <- read.table("classroom_net1.dat",
header=TRUE, skip=3)
getwd()
#set working directory
setwd("/Users/cora/git_repos/dynamic_network_viz/Classroom_RSienaSession")
time1 <- read.table("classroom_net1.dat",
header=TRUE, skip=3)
View(time1)
time1 <- read.table("classroom_net1.dat",
header=TRUE, skip=3)
time2 <- read.table("classroom_net2.dat",
header=TRUE, skip=3)
time3 <- read.table("classroom_net3.dat",
header=TRUE, skip=3)
time4 <- read.table("classroom_net4.dat",
header=TRUE, skip=3)
readLines("classroom_net1.dat", n = 10)
View(time1)
setwd("/Users/cora/git_repos/dynamic_network_viz/Classroom_RSienaSession")
#readLines("classroom_net1.dat", n = 10)
primary <- read.table("classroom_primary.dat", header=TRUE)
time1 <- read.table("classroom_net1.dat", header=TRUE)
time2 <- read.table("classroom_net2.dat",
header=TRUE)
time3 <- read.table("classroom_net3.dat",
header=TRUE)
time4 <- read.table("classroom_net4.dat",
header=TRUE)
alcohol <- read.table("classroom_alcohol.dat",
header=TRUE)
demographics <- read.table("classroom_demographics.dat",
header=TRUE)
View(primary)
View(demographics)
View(alcohol)
View(demographics)
RSiena <- read.csv("classroom_RSienaSessionFile.csv", header = TRUE)
View(RSiena)
#convert to json
library(rjson)
gender <- read.table("classroom_demographics.dat", #constant individual covariate sex: 1 = girl, 2 = boy
header=TRUE)
install.packages("rjson")
#convert to json
library(rjson)
x <- toJSON(unname(split(time1, 1:nrow(time1))))
cat(x)
head(x)
x[1,1]
x[1]
View(time1)
x <- toJSON(unname(split(gender, 1:nrow(gender))))
x[1]
x <- toJSON(gender)
x[1]
x <- toJSON(gender, 1:nrow(gender))
x[1]
x <- toJSON(gender)
x <- list( alpha = 1:5, beta = "Bravo",
gamma = list(a=1:3, b=NULL),
delta = c(TRUE, FALSE) )
json <- toJSON( x )
View(x)
json
#convert to json
library(rjson)
x <- toJSON(gender)
x[1]
View(gender)
#combine into one dataframe
rbind(primary, gender)
#combine into one dataframe
rbind(alcohol, gender)
#Data Cleaning for Data
#written by Cora Allen-Coleman & Kelly Savietta
library(tidyverse)
#combine into one dataframe
bind_cols(gender)
View(alcohol)
#use gender df as user df
gender$id <- seq(1:25)
gender$X1 <- gender
gender <- read.table("classroom_demographics.dat", #constant individual covariate sex: 1 = girl, 2 = boy
header=TRUE)
name(gender$X1) <- gender
rename(gender$X1) <- "gender"
colnames(gender$X1) <- ("gender", "id")
colnames(gender) <- ("gender", "id")
colnames(gender$X1) <- ("gender")
colname(gender$X1) <- ("gender")
colnames(gender) <- c("gender", "id")
#use gender df as user df
gender$id <- seq(1:25)
colnames(gender) <- c("gender", "id")
#reorder columns of df
gender <- gender[, c(2, 1)]
#EDGES
library(igraph)
#EDGES
library(igraph)
time1_edges <- graph.adjacency(time1)
#EDGES
library(igraph)
time1_edges <- graph.adjacency(time1)
time1_edges <- graph.adjacency(as.matrix(time1))
View(time2)
View(time4)
dim(time4)
time4_edges <- graph.adjacency(time4[, 2:26])
typeof(time4[1,1])
time4 <- mutate_all(time4, function(x) as.numeric(as.double(x)))
time4_edges <- graph.adjacency(time4[, 2:26])
#convert to json
library(rjson)
x <- toJSON(gender)
gender_json <- toJSON(gender)
gender_json[1]
typeof(time4)
time4 <- as.matrix(time4)
time4 <- mutate_all(time4, function(x) as.numeric(as.double(x)))
time4 <- mutate_all(time4, function(x) as.double(x))
time4 <- read.table("classroom_net4.dat",
header=TRUE)
time4 <- mutate_all(time4, function(x) as.double(x))
time4 <- as.matrix(time4)
time4_edges <- graph.adjacency(time4[, 2:26])
time4_edges <- graph_from_adjacency_matrix(time4[, 2:26])
View(time4_edges)
get.edgelist(time1_edges)
get.edgelist(time4_edges)
time4 <- read.table("classroom_net4.dat",
header=TRUE)
time4_edges <- graph_from_adjacency_matrix(time4[, 2:26])
time4 <- read.table("classroom_net4.dat",
header=TRUE)
#26 students
time1 <- read.table("classroom_net1.dat", header=FALSE)
time2 <- read.table("classroom_net2.dat",
header=FALSE)
time3 <- read.table("classroom_net3.dat",
header=FALSE)
time4 <- read.table("classroom_net4.dat",
header=FALSE)
time1 <- read.table("classroom_net1.dat", header=FALSE)
time2 <- read.table("classroom_net2.dat",
header=FALSE)
time3 <- read.table("classroom_net3.dat",
header=FALSE)
time4 <- read.table("classroom_net4.dat",
header=FALSE)
primary <- read.table("classroom_primary.dat", header=FALSE) #changing dyadic covariate primary: (Have you gone to the same primary school?) 0 = no, 1 = yes
alcohol <- read.table("classroom_alcohol.dat", #changing individual covariate alcohol: (How often did you drink alcohol with friends in the last three months?) 1 = never, 2 = once, 3 = 2-4 times, 4 = 5-10 times, 5 = more that 10 times
header=FALSE)
gender <- read.table("classroom_demographics.dat", #constant individual covariate sex: 1 = girl, 2 = boy
header=FALSE)
RSiena <- read.csv("classroom_RSienaSessionFile.csv", header = FALSE)
## NODES ##
#use gender df as user df (NODES)
gender$id <- seq(1:25)
colnames(gender) <- c("gender", "id")
#reorder columns of df
gender <- gender[, c(2, 1)]
## NODES ##
#use gender df as user df (NODES)
gender$id <- seq(1:26)
#reorder columns of df
gender <- gender[, c(2, 1)]
gender <- read.table("classroom_demographics.dat", #constant individual covariate sex: 1 = girl, 2 = boy
header=FALSE)
RSiena <- read.csv("classroom_RSienaSessionFile.csv", header = FALSE)
## NODES ##
#use gender df as user df (NODES)
gender$id <- seq(1:26)
colnames(gender) <- c("gender", "id")
#reorder columns of df
gender <- gender[, c(2, 1)]
#EDGES
library(igraph)
time4 <- mutate_all(time4, function(x) as.double(x))
#EDGES
library(igraph)
time4 <- mutate_all(time4, function(x) as.double(x))
time4 <- as.matrix(time4)
time4_edges <- graph_from_adjacency_matrix(time4)
get.edgelist(time4_edges)
colnames(time4) <- seq(1:26)
#EDGES
library(igraph)
time4 <- mutate_all(time4, function(x) as.double(x))
time4 <- as.matrix(time4)
time4_edges <- graph_from_adjacency_matrix(time4)
get.edgelist(time4_edges)
time4_edges <- get.edgelist(graph_from_adjacency_matrix(time4))
time4_json <- toJSON(time4_edges)
time4_json
View(time4_edges)
time4_edges <- as.data.frame(time4_edges) #to df
#convert to json
library(rjson)
time4_json <- toJSON(time4_edges)
time4_json
colnames(time4_edges) <- c("source", "target")
#convert to json
library(rjson)
time4_json <- toJSON(time4_edges)
time4_json
time4_json <- toJSON(unname(split(time4_edges, 1:nrow(time4_edges))))
time4_json
View(time4_edges)
time4_json
time4_json <- toJSON(unname(split(time4_edges, 1:nrow(time4_edges))))
time4_json
write(time4_json, "time4_json.json")
gender_json <- toJSON(unname(split(gender, 1:nrow(gender))))
write(gender_json, "gender.json")
gender_json
#Data Cleaning for Data
#written by Cora Allen-Coleman & Kelly Savietta
library(tidyverse)
library(igraph)
library(rjson)
#set working directory
setwd("/Users/cora/git_repos/dynamic_network_viz/Classroom_RSienaSession")
#26 students
time1 <- read.table("classroom_net1.dat", header=FALSE)
time2 <- read.table("classroom_net2.dat",
header=FALSE)
time3 <- read.table("classroom_net3.dat",
header=FALSE)
time4 <- read.table("classroom_net4.dat",
header=FALSE)
colnames(time4) <- seq(1:26)
primary <- read.table("classroom_primary.dat", header=FALSE) #changing dyadic covariate primary: (Have you gone to the same primary school?) 0 = no, 1 = yes
alcohol <- read.table("classroom_alcohol.dat", #changing individual covariate alcohol: (How often did you drink alcohol with friends in the last three months?) 1 = never, 2 = once, 3 = 2-4 times, 4 = 5-10 times, 5 = more that 10 times
header=FALSE)
gender <- read.table("classroom_demographics.dat", #constant individual covariate sex: 1 = girl, 2 = boy
header=FALSE)
#Data Cleaning for Data
#written by Cora Allen-Coleman & Kelly Savietta
library(tidyverse)
library(igraph)
library(rjson)
#set working directory
setwd("/Users/cora/git_repos/dynamic_network_viz/Classroom_RSienaSession")
#26 students
time1 <- read.table("classroom_net1.dat", header=FALSE)
time2 <- read.table("classroom_net2.dat",
header=FALSE)
time3 <- read.table("classroom_net3.dat",
header=FALSE)
time4 <- read.table("classroom_net4.dat",
header=FALSE)
colnames(time4) <- seq(1:26)
primary <- read.table("classroom_primary.dat", header=FALSE) #changing dyadic covariate primary: (Have you gone to the same primary school?) 0 = no, 1 = yes
alcohol <- read.table("classroom_alcohol.dat", #changing individual covariate alcohol: (How often did you drink alcohol with friends in the last three months?) 1 = never, 2 = once, 3 = 2-4 times, 4 = 5-10 times, 5 = more that 10 times
header=FALSE)
gender <- read.table("classroom_demographics.dat", #constant individual covariate sex: 1 = girl, 2 = boy
header=FALSE)
#RSiena <- read.csv("classroom_RSienaSessionFile.csv", header = FALSE)
## NODES ##
#use gender df as user df (NODES)
gender$id <- seq(1:26)
colnames(gender) <- c("gender", "id")
#reorder columns of df
gender <- gender[, c(2, 1)]
#EDGES
time1 <- mutate_all(time1, function(x) as.double(x))
time1_edges <- as.data.frame(get.edgelist(graph_from_adjacency_matrix(as.matrix(time1))))
colnames(time1_edges) <- c("source", "target")
time2 <- mutate_all(time2, function(x) as.double(x))
time2_edges <- as.data.frame(get.edgelist(graph_from_adjacency_matrix(as.matrix(time2))))
colnames(time2_edges) <- c("source", "target")
time3 <- mutate_all(time3, function(x) as.double(x))
time3_edges <- as.data.frame(get.edgelist(graph_from_adjacency_matrix(as.matrix(time3))))
colnames(time3_edges) <- c("source", "target")
time4 <- mutate_all(time4, function(x) as.double(x))
time4_edges <- as.data.frame(get.edgelist(graph_from_adjacency_matrix(as.matrix(time4))))
colnames(time4_edges) <- c("source", "target")
#convert to json
time1_json <- toJSON(unname(split(time1_edges, 1:nrow(time1_edges))))
write(time1_json, "time1_json.json")
time2_json <- toJSON(unname(split(time2_edges, 1:nrow(time2_edges))))
write(time2_json, "time2_json.json")
time3_json <- toJSON(unname(split(time3_edges, 1:nrow(time3_edges))))
write(time3_json, "time3_json.json")
time4_json <- toJSON(unname(split(time4_edges, 1:nrow(time4_edges))))
write(time4_json, "time4_json.json")
gender_json <- toJSON(unname(split(gender, 1:nrow(gender))))
write(gender_json, "gender.json")
time1_graph <- graph_from_adjacency_matrix(as.matrix(time1))
cluster_louvain(time1_graph)
fastgreedy.community(time1_graph)
as.undirected(time1_graph)
fastgreedy.community(time1_graph)
time1_graph_undir <- as.undirected(time1_graph)
time1_graph <- graph_from_adjacency_matrix(as.matrix(time1))
time1_graph_undir <- as.undirected(time1_graph)
fastgreedy.community(time1_graph_undir)
cluster_louvain(time1_graph_undir)
fastgreedy <- fastgreedy.community(time1_graph_undir) #hierarchical bottomup community detection approach.  Initially, every vertex belongs to a separate community, and communities are merged iteratively such that each merge is locally optimal
louvain <- cluster_louvain(time1_graph_undir) #hierarchical community detection approach. see http://arxiv.org/abs/arXiv:0803.0476
plot(fastgreedy)
time1_graph
plot(time1_graph)
plot(time1_graph_undir)
time1_graph <- as.undirected(graph_from_adjacency_matrix(as.matrix(time1)))
fastgreedy <- fastgreedy.community(time1_graph) #hierarchical bottomup community detection approach.  Initially, every vertex belongs to a separate community, and communities are merged iteratively such that each merge is locally optimal
louvain <- cluster_louvain(time1_graph) #hierarchical community detection approach. see http://arxiv.org/abs/arXiv:0803.0476
## PLOTS
plot(fastgreedy)
time1_graph <- as.undirected(graph_from_adjacency_matrix(as.matrix(time1)))
fastgreedy <- fastgreedy.community(time1_graph) #hierarchical bottomup community detection approach.  Initially, every vertex belongs to a separate community, and communities are merged iteratively such that each merge is locally optimal
louvain <- cluster_louvain(time1_graph) #hierarchical community detection approach. see http://arxiv.org/abs/arXiv:0803.0476
## PLOTS
plot(louvain)
## PLOTS
plot.igraph(louvain)
View(time1_edges)
View(time1)
#26 students
time1 <- read.table("classroom_net1.dat", header=FALSE)
colnames(time1) <- seq(1:26)
time2 <- read.table("classroom_net2.dat", header=FALSE)
colnames(time2) <- seq(1:26)
time3 <- read.table("classroom_net3.dat", header=FALSE)
colnames(time3) <- seq(1:26)
time4 <- read.table("classroom_net4.dat", header=FALSE)
colnames(time4) <- seq(1:26)
primary <- read.table("classroom_primary.dat", header=FALSE) #changing dyadic covariate primary: (Have you gone to the same primary school?) 0 = no, 1 = yes
alcohol <- read.table("classroom_alcohol.dat", #changing individual covariate alcohol: (How often did you drink alcohol with friends in the last three months?) 1 = never, 2 = once, 3 = 2-4 times, 4 = 5-10 times, 5 = more that 10 times
header=FALSE)
gender <- read.table("classroom_demographics.dat", #constant individual covariate sex: 1 = girl, 2 = boy
header=FALSE)
#Data Cleaning for Data
#written by Cora Allen-Coleman & Kelly Savietta
library(tidyverse)
library(igraph)
library(rjson)
#set working directory
setwd("/Users/cora/git_repos/dynamic_network_viz/data")
#26 students
time1 <- read.table("classroom_net1.dat", header=FALSE)
colnames(time1) <- seq(1:26)
time2 <- read.table("classroom_net2.dat", header=FALSE)
colnames(time2) <- seq(1:26)
time3 <- read.table("classroom_net3.dat", header=FALSE)
colnames(time3) <- seq(1:26)
time4 <- read.table("classroom_net4.dat", header=FALSE)
colnames(time4) <- seq(1:26)
primary <- read.table("classroom_primary.dat", header=FALSE) #changing dyadic covariate primary: (Have you gone to the same primary school?) 0 = no, 1 = yes
alcohol <- read.table("classroom_alcohol.dat", #changing individual covariate alcohol: (How often did you drink alcohol with friends in the last three months?) 1 = never, 2 = once, 3 = 2-4 times, 4 = 5-10 times, 5 = more that 10 times
header=FALSE)
gender <- read.table("classroom_demographics.dat", #constant individual covariate sex: 1 = girl, 2 = boy
header=FALSE)
#RSiena <- read.csv("classroom_RSienaSessionFile.csv", header = FALSE)
## NODES ##
#use gender df as user df (NODES)
gender$id <- seq(1:26)
colnames(gender) <- c("gender", "id")
#reorder columns of df
gender <- gender[, c(2, 1)]
#EDGES
time1 <- mutate_all(time1, function(x) as.double(x))
time1_edges <- as.data.frame(get.edgelist(graph_from_adjacency_matrix(as.matrix(time1))))
colnames(time1_edges) <- c("source", "target")
time2 <- mutate_all(time2, function(x) as.double(x))
time2_edges <- as.data.frame(get.edgelist(graph_from_adjacency_matrix(as.matrix(time2))))
colnames(time2_edges) <- c("source", "target")
time3 <- mutate_all(time3, function(x) as.double(x))
time3_edges <- as.data.frame(get.edgelist(graph_from_adjacency_matrix(as.matrix(time3))))
colnames(time3_edges) <- c("source", "target")
time4 <- mutate_all(time4, function(x) as.double(x))
time4_edges <- as.data.frame(get.edgelist(graph_from_adjacency_matrix(as.matrix(time4))))
colnames(time4_edges) <- c("source", "target")
#convert to json
time1_json <- toJSON(unname(split(time1_edges, 1:nrow(time1_edges))))
write(time1_json, "time1_json.json")
time2_json <- toJSON(unname(split(time2_edges, 1:nrow(time2_edges))))
write(time2_json, "time2_json.json")
time3_json <- toJSON(unname(split(time3_edges, 1:nrow(time3_edges))))
write(time3_json, "time3_json.json")
time4_json <- toJSON(unname(split(time4_edges, 1:nrow(time4_edges))))
write(time4_json, "time4_json.json")
gender_json <- toJSON(unname(split(gender, 1:nrow(gender))))
write(gender_json, "gender.json")
fastgreedy <- fastgreedy.community(time1_graph) #hierarchical bottomup community detection approach.  Initially, every vertex belongs to a separate community, and communities are merged iteratively such that each merge is locally optimal
View(fastgreedy)
View(louvain)
louvain[["memberships"]]
louvain[["membership"]]
louvain
View(fastgreedy)
fastgreedy
